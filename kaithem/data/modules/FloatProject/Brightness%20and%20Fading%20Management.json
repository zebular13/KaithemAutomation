{
    "action": "global last\r\n#module.vCurrent = module.vCurrent + (((module.vDest-module.vCurrent)*module.vRate)*(time.time()-last))\r\n#if module.vCurrent < module.vDest:\r\n#    module.vCurrent = min(module.vCurrent+module.vRate*(time.time()-last), module.vDest)\r\n#if module.vCurrent > module.vDest:\r\n#    module.vCurrent = max(module.vCurrent-module.vRate*(time.time()-last), module.vDest)\r\nmodule.vCurrent = doFade(module.vCurrent, module.vDest, module.vRate)\r\nmodule.mirror_vCurrent = doFade(module.mirror_vCurrent, module.mirror_vDest, module.mirror_vRate)\r\nmodule.shower_current = rgb_doFade(module.shower_current, module.shower_dest, module.shower_rate)\r\nmodule.changing_current = rgb_doFade(module.changing_current, module.changing_dest, module.changing_rate)\r\nmodule.pal_current = rgb_doFade(module.pal_current, module.pal_dest, module.pal_rate)\r\n\r\nmodule.brightness.write(module.vCurrent)\r\nmodule.mirror_brightness.write(module.mirror_vCurrent)\r\n\r\nmodule.pal_r.write(module.pal_current[0])\r\nmodule.pal_g.write(module.pal_current[1])\r\nmodule.pal_b.write(module.pal_current[2])\r\n\r\nmodule.shower_r.write(module.shower_current[0])\r\nmodule.shower_g.write(module.shower_current[1])\r\nmodule.shower_b.write(module.shower_current[2])\r\n\r\nmodule.changing_r.write(module.changing_current[0])\r\nmodule.changing_g.write(module.changing_current[1])\r\nmodule.changing_b.write(module.changing_current[2])\r\n\r\nkaithem.message.post(\"pal_color\", module.pal_current)\r\nkaithem.message.post(\"shower_color\", module.shower_current)\r\nkaithem.message.post(\"changing_color\", module.shower_current)\r\nkaithem.message.post(\"mirror_level\", module.mirror_vCurrent)\r\n\r\nlast = time.time()\r\nkaithem.message.post(\"MainTank_brightness\", module.vCurrent)",
    "continual": true,
    "disabled": false,
    "once": true,
    "priority": "realtime",
    "rate-limit": 0.02,
    "resource-type": "event",
    "setup": "import time\r\n#This code runs once when the event loads. It also runs when you save the event during the test compile\r\n#and may run multiple times when kaithem boots due to dependancy resolution\r\n__doc__=\"\"\"This event handles everything to do with the brightness of the lights.\r\nIt also handles anything the user does with the buttons of the attendant with the slider.\r\nTo fade the lights from the current value, call module.fadeV(val, time). \r\nto set, call module.setV(value). Calling set overrides any fade in progress.\r\nTo get the current brightness, use module.vCurrent(That's a variable not a function). \r\nThe user pressing a button also cancels any fade. \r\nTo override the user use module.begincutscene() and module.endcutscene()\"\"\"\r\nmodule.vCurrent = 0.5\r\nmodule.vDest = 0.5\r\nmodule.vRate = 1\r\nmodule.vLock = 0\r\n\r\n\r\ndef initial_lights():\r\n    module.pal_current = module.pal_dest = (150, 200, 100)\r\n    module.shower_current = module.shower_dest = (210, 240, 255)\r\n    module.changing_current = module.changing_dest = (210, 240, 180)\r\n    module.mirror_vCurrent = module.changing_vDest = 128\r\nmodule.initial_lights = initial_lights\r\n\r\n\r\nmodule.brightness = kaithem.widget.Slider(min=0,max=1,step=0.001)\r\ndef f(u,v):\r\n    if not u==\"__SERVER__\":\r\n        setV(v)\r\nmodule.brightness.attach(f)\r\n\r\nmodule.mirror_brightness = kaithem.widget.Slider(min=0,max=255,step=1)\r\ndef f(u,v):\r\n    if not u==\"__SERVER__\":\r\n        module.mirror_vDest = module.mirror_vCurrent = v\r\nmodule.mirror_brightness.attach(f)\r\n\r\nmodule.pal_r = kaithem.widget.Slider(min=0,max=255,step=1)\r\ndef f(u,v):\r\n    if not u==\"__SERVER__\":\r\n        module.pal_current[0] = v\r\n        module.pal_dest[0] = v\r\nmodule.pal_r.attach(f)\r\n\r\nmodule.pal_g = kaithem.widget.Slider(min=0,max=255,step=1)\r\ndef f(u,v):\r\n    if not u==\"__SERVER__\":\r\n        module.pal_current[1] = v\r\n        module.pal_dest[1] = v\r\nmodule.pal_g.attach(f)\r\n\r\nmodule.pal_b = kaithem.widget.Slider(min=0,max=255,step=1)\r\ndef f(u,v):\r\n    if not u==\"__SERVER__\":\r\n        module.pal_current[2]= v\r\n        module.pal_dest[2] = v\r\nmodule.pal_b.attach(f)\r\n\r\n\r\nmodule.shower_r = kaithem.widget.Slider(min=0,max=255,step=1)\r\ndef f(u,v):\r\n    if not u==\"__SERVER__\":\r\n        module.shower_current[0] = v\r\n        module.shower_dest[0] = v\r\nmodule.shower_r.attach(f)\r\n\r\nmodule.shower_g = kaithem.widget.Slider(min=0,max=255,step=1)\r\ndef f(u,v):\r\n    if not u==\"__SERVER__\":\r\n        module.shower_current[1]= v\r\n        module.shower_dest[1] = v\r\nmodule.shower_g.attach(f)\r\n\r\nmodule.shower_b = kaithem.widget.Slider(min=0,max=255,step=1)\r\ndef f(u,v):\r\n    if not u==\"__SERVER__\":\r\n        module.shower_current[2]= v\r\n        module.shower_dest[2] = v\r\nmodule.shower_b.attach(f)\r\n\r\n\r\n\r\nmodule.changing_r = kaithem.widget.Slider(min=0,max=255,step=1)\r\ndef f(u,v):\r\n    if not u==\"__SERVER__\":\r\n        module.changing_current[0]= v\r\n        module.changing_dest[0] = v\r\nmodule.changing_r.attach(f)\r\n\r\nmodule.changing_g = kaithem.widget.Slider(min=0,max=255,step=1)\r\ndef f(u,v):\r\n    if not u==\"__SERVER__\":\r\n        module.changing_current[1]= v\r\n        module.changing_dest[1] = v\r\nmodule.changing_g.attach(f)\r\n\r\nmodule.changing_b = kaithem.widget.Slider(min=0,max=255,step=1)\r\ndef f(u,v):\r\n    if not u==\"__SERVER__\":\r\n        module.changing_current[2]= v\r\n        module.changing_dest[2] = v\r\nmodule.changing_b.attach(f)\r\n\r\n#For the mirror light\r\nmodule.mirror_vCurrent = 0.5\r\nmodule.mirror_vDest = 0.4\r\nmodule.mirror_vRate = 0.01\r\n\r\nmodule.shower_current = [255,255,255]\r\nmodule.shower_dest = [255,100,100]\r\nmodule.shower_rate = [10, 20, 30]\r\n\r\nmodule.changing_current = [255,255,255]\r\nmodule.changing_dest = [200,255,180]\r\nmodule.changing_rate = [10, 20,30]\r\n\r\nmodule.pal_current = [255,255,255]\r\nmodule.pal_dest = [255,255,210]\r\nmodule.pal_rate = [10,20, 30]\r\n\r\ndef rgb_blend(a,b,s):\r\n    return(\r\n        a[0]*(1-s)+b[0]*s,\r\n        a[1]*(1-s)+b[1]*s,\r\n        a[2]*(1-s)+b[2]*s\r\n        )\r\n\r\n\r\ndef fadeV(dest,t):\r\n    d = abs(dest -module.vCurrent)\r\n    module.vRate = d/float(t)\r\n    module.vDest = dest\r\n\r\ndef setV(val):\r\n    if module.vLock:\r\n        return\r\n    else:\r\n        module.vCurrent = val\r\n        module.vDest= val\r\n        \r\ndef rgb_rate(c,d,t):\r\n    print(c,d,t)\r\n    x = [0,0,0]\r\n    for i in range(3):\r\n        di = abs(d[i] -c[i])\r\n        x[i] = di/t\r\n    return x\r\n\r\ndef mirror_fadeV(dest,t):\r\n    d = abs(dest -module.mirror_vCurrent)\r\n    module.mirror_vRate = d/float(t)\r\n    module.mirror_vDest = dest\r\n    \r\n    \r\ndef pal_fade(dest,t):\r\n    print(dest,t)\r\n    module.pal_rate = rgb_rate(module.pal_current,dest,t)\r\n    module.pal_dest = list(dest)\r\n    \r\ndef shower_fade(dest,t):\r\n\tmodule.shower_rate = rgb_rate(module.shower_current,dest,t)\r\n\tmodule.shower_dest = list(dest)\r\n\r\ndef changing_fade(dest,t):\r\n\tmodule.changing_rate = rgb_rate(module.changing_current,dest,t)\r\n\tmodule.changing_dest = list(dest)\r\n\r\nmodule.fadePAL = pal_fade\r\nmodule.fadeShower = shower_fade\r\nmodule.fadeChanging = changing_fade\r\nmodule.fadeMirror = mirror_fadeV\r\ndef doFade(c,d,r):\r\n    if c < d:\r\n        return min(c+r*(time.time()-last), d)\r\n    if c > d:\r\n        return max(c-r*(time.time()-last), d)\r\n    else:\r\n        return c\r\n        \r\ndef rgb_doFade(c,d,r):\r\n    x = [0,0,0]\r\n    for i in range(3):\r\n        x[i] = doFade(c[i],d[i],r[i])\r\n    return x\r\n\r\ndef lock():\r\n    module.vLock = 1\r\ndef unlock():\r\n    module.vLock =0\r\n    \r\nmodule.begincutscene = lock\r\nmodule.endcutscene = unlock\r\nmodule.setV = setV\r\nmodule.fadeV = fadeV\r\nlast = time.time()",
    "trigger": "True",
    "versions": {
        "action": "global last\r\n#module.vCurrent = module.vCurrent + (((module.vDest-module.vCurrent)*module.vRate)*(time.time()-last))\r\n#if module.vCurrent < module.vDest:\r\n#    module.vCurrent = min(module.vCurrent+module.vRate*(time.time()-last), module.vDest)\r\n#if module.vCurrent > module.vDest:\r\n#    module.vCurrent = max(module.vCurrent-module.vRate*(time.time()-last), module.vDest)\r\nmodule.vCurrent = doFade(module.vCurrent, module.vDest, module.vRate)\r\nmodule.mirror_vCurrent = doFade(module.mirror_vCurrent, module.mirror_vDest, module.mirror_vRate)\r\nmodule.shower_current = rgb_doFade(module.shower_current, module.shower_dest, module.shower_rate)\r\nmodule.changing_current = rgb_doFade(module.changing_current, module.changing_dest, module.changing_rate)\r\nmodule.pal_current = rgb_doFade(module.pal_current, module.pal_dest, module.pal_rate)\r\n\r\nmodule.brightness.write(module.vCurrent)\r\nmodule.mirror_brightness.write(module.mirror_vCurrent)\r\n\r\nmodule.pal_r.write(module.pal_current[0])\r\nmodule.pal_g.write(module.pal_current[1])\r\nmodule.pal_b.write(module.pal_current[2])\r\n\r\nmodule.shower_r.write(module.shower_current[0])\r\nmodule.shower_g.write(module.shower_current[1])\r\nmodule.shower_b.write(module.shower_current[2])\r\n\r\nmodule.changing_r.write(module.changing_current[0])\r\nmodule.changing_g.write(module.changing_current[1])\r\nmodule.changing_b.write(module.changing_current[2])\r\n\r\nkaithem.message.post(\"pal_color\", module.pal_current)\r\nkaithem.message.post(\"shower_color\", module.shower_current)\r\nkaithem.message.post(\"changing_color\", module.shower_current)\r\nkaithem.message.post(\"mirror_level\", module.mirror_vCurrent)\r\n\r\nlast = time.time()\r\nkaithem.message.post(\"MainTank_brightness\", module.vCurrent)",
        "continual": true,
        "priority": "realtime",
        "rate-limit": 0.02,
        "resource-type": "event",
        "setup": "import time\r\n#This code runs once when the event loads. It also runs when you save the event during the test compile\r\n#and may run multiple times when kaithem boots due to dependancy resolution\r\n__doc__=\"\"\"This event handles everything to do with the brightness of the lights.\r\nIt also handles anything the user does with the buttons of the attendant with the slider.\r\nTo fade the lights from the current value, call module.fadeV(val, time). \r\nto set, call module.setV(value). Calling set overrides any fade in progress.\r\nTo get the current brightness, use module.vCurrent(That's a variable not a function). \r\nThe user pressing a button also cancels any fade. \r\nTo override the user use module.begincutscene() and module.endcutscene()\"\"\"\r\nmodule.vCurrent = 0.5\r\nmodule.vDest = 0.5\r\nmodule.vRate = 1\r\nmodule.vLock = 0\r\n\r\nmodule.brightness = kaithem.widget.Slider(min=0,max=1,step=0.001)\r\ndef f(u,v):\r\n    if not u==\"__SERVER__\":\r\n        setV(v)\r\nmodule.brightness.attach(f)\r\n\r\nmodule.mirror_brightness = kaithem.widget.Slider(min=0,max=1,step=0.001)\r\ndef f(u,v):\r\n    if not u==\"__SERVER__\":\r\n        module.mirror_vDest = module.mirror_vCurrent = v\r\nmodule.mirror_brightness.attach(f)\r\n\r\nmodule.pal_r = kaithem.widget.Slider(min=0,max=255,step=1)\r\ndef f(u,v):\r\n    if not u==\"__SERVER__\":\r\n        module.pal_current[0] = module.pal_dest[0] = v\r\nmodule.pal_r.attach(f)\r\n\r\nmodule.pal_g = kaithem.widget.Slider(min=0,max=255,step=1)\r\ndef f(u,v):\r\n    if not u==\"__SERVER__\":\r\n        module.pal_current[1] = module.pal_dest[1] = v\r\nmodule.pal_g.attach(f)\r\n\r\nmodule.pal_b = kaithem.widget.Slider(min=0,max=255,step=1)\r\ndef f(u,v):\r\n    if not u==\"__SERVER__\":\r\n        module.pal_current[2] = module.pal_dest[2] = v\r\nmodule.pal_b.attach(f)\r\n\r\n\r\nmodule.shower_r = kaithem.widget.Slider(min=0,max=255,step=1)\r\ndef f(u,v):\r\n    if not u==\"__SERVER__\":\r\n        module.shower_current[0] = module.shower_dest[0] = v\r\nmodule.shower_r.attach(f)\r\n\r\nmodule.shower_g = kaithem.widget.Slider(min=0,max=255,step=1)\r\ndef f(u,v):\r\n    if not u==\"__SERVER__\":\r\n        module.shower_current[1] = module.shower_dest[1] = v\r\nmodule.shower_g.attach(f)\r\n\r\nmodule.shower_b = kaithem.widget.Slider(min=0,max=255,step=1)\r\ndef f(u,v):\r\n    if not u==\"__SERVER__\":\r\n        module.shower_current[2] = module.shower_dest[2] = v\r\nmodule.shower_b.attach(f)\r\n\r\n\r\n\r\nmodule.changing_r = kaithem.widget.Slider(min=0,max=255,step=1)\r\ndef f(u,v):\r\n    if not u==\"__SERVER__\":\r\n        module.changing_current[0] = module.changing_dest[0] = v\r\nmodule.changing_r.attach(f)\r\n\r\nmodule.changing_g = kaithem.widget.Slider(min=0,max=255,step=1)\r\ndef f(u,v):\r\n    if not u==\"__SERVER__\":\r\n        module.changing_current[1] = module.changing_dest[1] = v\r\nmodule.changing_g.attach(f)\r\n\r\nmodule.changing_b = kaithem.widget.Slider(min=0,max=255,step=1)\r\ndef f(u,v):\r\n    if not u==\"__SERVER__\":\r\n        module.changing_current[2] = module.changing_dest[2] = v\r\nmodule.changing_b.attach(f)\r\n\r\n#For the mirror light\r\nmodule.mirror_vCurrent = 0.5\r\nmodule.mirror_vDest = 0.4\r\nmodule.mirror_vRate = 0.01\r\n\r\nmodule.shower_current = [255,255,255]\r\nmodule.shower_dest = [255,100,100]\r\nmodule.shower_rate = [10, 20, 30]\r\n\r\nmodule.changing_current = [255,255,255]\r\nmodule.changing_dest = [200,255,180]\r\nmodule.changing_rate = [10, 20,30]\r\n\r\nmodule.pal_current = [255,255,255]\r\nmodule.pal_dest = [255,255,210]\r\nmodule.pal_rate = [10,20, 30]\r\n\r\ndef rgb_blend(a,b,s):\r\n    return(\r\n        a[0]*(1-s)+b[0]*s,\r\n        a[1]*(1-s)+b[1]*s,\r\n        a[2]*(1-s)+b[2]*s\r\n        )\r\n\r\n\r\ndef fadeV(dest,t):\r\n    d = abs(dest -module.vCurrent)\r\n    module.vRate = d/float(t)\r\n    module.vDest = dest\r\n\r\ndef setV(val):\r\n    if module.vLock:\r\n        return\r\n    else:\r\n        module.vCurrent = val\r\n        module.vDest= val\r\n        \r\ndef rgb_rate(c,d,t):\r\n    print(c,d,t)\r\n    x = [0,0,0]\r\n    for i in range(3):\r\n        d = abs(d[i] -c[i])\r\n        x[i] = d/t\r\n    return x\r\n\r\ndef mirror_fadeV(dest,t):\r\n    d = abs(dest -module.mirror_vCurrent)\r\n    module.mirror_vRate = d/float(t)\r\n    module.mirror_vDest = dest\r\n    \r\n    \r\ndef pal_fade(dest,t):\r\n    print(dest,t)\r\n\tmodule.pal_rate = rgb_rate(module.pal_current,dest,t)\r\n\tmodule.pal_dest = dest\r\n    \r\ndef shower_fade(dest,t):\r\n\tmodule.shower_rate = rgb_rate(module.shower_current,dest,t)\r\n\tmodule.shower_dest = dest\r\n\r\ndef changing_fade(dest,t):\r\n\tmodule.changing_rate = rgb_rate(module.changing_current,dest,t)\r\n\tmodule.changing_dest = dest\r\n\r\nmodule.fadePAL = pal_fade\r\nmodule.fadeShower = shower_fade\r\nmodule.fadeChanging = changing_fade\r\nmodule.fadeMirror = mirror_fadeV\r\ndef doFade(c,d,r):\r\n    if c < d:\r\n        return min(c+r*(time.time()-last), d)\r\n    if c > d:\r\n        return max(c-r*(time.time()-last), d)\r\n    else:\r\n        return c\r\n        \r\ndef rgb_doFade(c,d,r):\r\n    x = [0,0,0]\r\n    for i in range(3):\r\n        x[i] = doFade(c[i],d[i],r[i])\r\n    return x\r\n\r\ndef lock():\r\n    module.vLock = 1\r\ndef unlock():\r\n    module.vLock =0\r\n    \r\nmodule.begincutscene = lock\r\nmodule.endcutscene = unlock\r\nmodule.setV = setV\r\nmodule.fadeV = fadeV\r\nlast = time.time()",
        "trigger": "True"
    }
}